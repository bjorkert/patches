Submodule Loop contains modified content
diff --git a/Loop/Loop/View Controllers/StatusTableViewController.swift b/Loop/Loop/View Controllers/StatusTableViewController.swift
index 904f64ca..cb91bbd1 100644
--- a/Loop/Loop/View Controllers/StatusTableViewController.swift	
+++ b/Loop/Loop/View Controllers/StatusTableViewController.swift	
@@ -147,7 +147,6 @@ final class StatusTableViewController: LoopChartsTableViewController {
         addScenarioStepGestureRecognizers()
 
         tableView.backgroundColor = .secondarySystemBackground
-    
     }
 
     override func didReceiveMemoryWarning() {
diff --git a/Loop/Loop/Views/SettingsView.swift b/Loop/Loop/Views/SettingsView.swift
index 90859273..5407eab9 100644
--- a/Loop/Loop/Views/SettingsView.swift
+++ b/Loop/Loop/Views/SettingsView.swift
@@ -28,6 +28,7 @@ public struct SettingsView: View {
     @State private var cgmChooserIsPresented: Bool = false
     @State private var serviceChooserIsPresented: Bool = false
     @State private var therapySettingsIsPresented: Bool = false
+    @State private var profilesIsPresented: Bool = false
     @State private var deletePumpDataAlertIsPresented = false
     @State private var deleteCGMDataAlertIsPresented = false
 
@@ -150,7 +151,11 @@ extension SettingsView {
             }
         }
     }
-        
+
+    private var isAnySheetPresented: Bool {
+        therapySettingsIsPresented || profilesIsPresented
+    }
+
     private var configurationSection: some View {
         Section(header: SectionHeader(label: NSLocalizedString("Configuration", comment: "The title of the Configuration section in settings"))) {
             LargeButton(action: { self.therapySettingsIsPresented = true },
@@ -173,7 +178,27 @@ extension SettingsView {
                         .environment(\.guidanceColors, self.guidanceColors)
                         .environment(\.insulinTintColor, self.insulinTintColor)
             }
-            
+            // Add the Profiles button here
+            LargeButton(action: { self.profilesIsPresented = true },
+                        includeArrow: true,
+                        imageView: AnyView(Image(systemName: "arrow.triangle.2.circlepath").font(.system(size: 30, weight: .bold))),
+                        label: NSLocalizedString("Profiles", comment: "Title text for button to Profiles"),
+                        descriptiveText: NSLocalizedString("Switch between profiles for different scenarios", comment: "Descriptive text for Profiles"))
+            .sheet(isPresented: $profilesIsPresented) {
+                ProfileView(viewModel: ProfileViewModel(therapySettings: self.viewModel.therapySettings(),
+                                                        sensitivityOverridesEnabled: FeatureFlags.sensitivityOverridesEnabled,
+                                                        adultChildInsulinModelSelectionEnabled: FeatureFlags.adultChildInsulinModelSelectionEnabled,
+                                                        delegate: self.viewModel.therapySettingsViewModelDelegate))
+                .environmentObject(displayGlucoseUnitObservable)
+                .environment(\.dismissAction, self.dismiss)
+                .environment(\.appName, self.appName)
+                .environment(\.chartColorPalette, .primary)
+                .environment(\.carbTintColor, self.carbTintColor)
+                .environment(\.glucoseTintColor, self.glucoseTintColor)
+                .environment(\.guidanceColors, self.guidanceColors)
+                .environment(\.insulinTintColor, self.insulinTintColor)
+            }
+
             ForEach(configurationMenuItemsForSupportPlugins) { item in
                 item.view
             }
Submodule LoopKit contains modified content
diff --git a/LoopKit/LoopKit.xcodeproj/project.pbxproj b/LoopKit/LoopKit.xcodeproj/project.pbxproj
index 6b13fc8..59fc2cd 100644
--- a/LoopKit/LoopKit.xcodeproj/project.pbxproj
+++ b/LoopKit/LoopKit.xcodeproj/project.pbxproj
@@ -787,6 +787,10 @@
 		C1FAEC1D264AD6B400A3250B /* DeviceStatusBadge.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1FAEC1C264AD6B400A3250B /* DeviceStatusBadge.swift */; };
 		C1FAEC1F264AE12700A3250B /* UIImage.swift in Sources */ = {isa = PBXBuildFile; fileRef = B47ECF8725DC20810024A54D /* UIImage.swift */; };
 		C1FAEC21264AEEA300A3250B /* UIImage.swift in Sources */ = {isa = PBXBuildFile; fileRef = C1FAEC20264AEEA300A3250B /* UIImage.swift */; };
+		DD508E062A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD508E052A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift */; };
+		DD508E082A17763700EEF8FD /* NewProfileEditor.swift in Sources */ = {isa = PBXBuildFile; fileRef = DD508E072A17763700EEF8FD /* NewProfileEditor.swift */; };
+		DDAF746729F422C600719F0A /* ProfileView.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDAF746629F422C600719F0A /* ProfileView.swift */; };
+		DDAF746929F4234000719F0A /* ProfileViewModel.swift in Sources */ = {isa = PBXBuildFile; fileRef = DDAF746829F4234000719F0A /* ProfileViewModel.swift */; };
 		E9077D2724ACD59F0066A88D /* InformationView.swift in Sources */ = {isa = PBXBuildFile; fileRef = E9077D2624ACD59F0066A88D /* InformationView.swift */; };
 		E9077D2A24ACDE2C0066A88D /* CorrectionRangeInformationView.swift in Sources */ = {isa = PBXBuildFile; fileRef = E9077D2924ACDE2C0066A88D /* CorrectionRangeInformationView.swift */; };
 		E9086B2924B39EDC0062F5C8 /* ChartsTableViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = E9086B2824B39EDC0062F5C8 /* ChartsTableViewController.swift */; };
@@ -1763,6 +1767,10 @@
 		C1FDCC0A29C786F90056E652 /* sk */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = sk; path = sk.lproj/Localizable.strings; sourceTree = "<group>"; };
 		C1FDCC0B29C786F90056E652 /* sk */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = sk; path = sk.lproj/Localizable.strings; sourceTree = "<group>"; };
 		C1FF3D4E29C786A900BDC1EC /* he */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = he; path = he.lproj/Localizable.strings; sourceTree = "<group>"; };
+		DD508E052A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "ProfileViewModel+FileManagement.swift"; sourceTree = "<group>"; };
+		DD508E072A17763700EEF8FD /* NewProfileEditor.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = NewProfileEditor.swift; sourceTree = "<group>"; };
+		DDAF746629F422C600719F0A /* ProfileView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ProfileView.swift; sourceTree = "<group>"; };
+		DDAF746829F4234000719F0A /* ProfileViewModel.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ProfileViewModel.swift; sourceTree = "<group>"; };
 		E9077D2624ACD59F0066A88D /* InformationView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = InformationView.swift; sourceTree = "<group>"; };
 		E9077D2924ACDE2C0066A88D /* CorrectionRangeInformationView.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = CorrectionRangeInformationView.swift; sourceTree = "<group>"; };
 		E9086B2824B39EDC0062F5C8 /* ChartsTableViewController.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = ChartsTableViewController.swift; sourceTree = "<group>"; };
@@ -2942,11 +2950,13 @@
 			isa = PBXGroup;
 			children = (
 				B455F3A325FF7FF0000ED456 /* CorrectionRangeOverridesEditorViewModel.swift */,
+				DDAF746829F4234000719F0A /* ProfileViewModel.swift */,
 				B4B7C1BB2604E3FC007379F6 /* CorrectionRangeScheduleEditorViewModel.swift */,
 				B4D4C20C25F95A8700DA809D /* DisplayGlucoseUnitObservable.swift */,
 				B455F48025FF9A8B000ED456 /* InsulinSensitivityScheduleEditorViewModel.swift */,
 				B455F2A125FBE985000ED456 /* SuspendThresholdEditorViewModel.swift */,
 				1D1FCE2424BD42EF000300A8 /* TherapySettingsViewModel.swift */,
+				DD508E052A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift */,
 			);
 			path = ViewModels;
 			sourceTree = "<group>";
@@ -3077,6 +3087,8 @@
 				E96DCB5924AF74AC007117BC /* SuspendThresholdEditor.swift */,
 				1D1FCE2A24BE704A000300A8 /* TherapySetting+Settings.swift */,
 				1D1A019D24B678BF0077D86E /* TherapySettingsView.swift */,
+				DDAF746629F422C600719F0A /* ProfileView.swift */,
+				DD508E072A17763700EEF8FD /* NewProfileEditor.swift */,
 			);
 			path = "Settings Editors";
 			sourceTree = "<group>";
@@ -3757,6 +3769,7 @@
 				E9086B4824B5405E0062F5C8 /* ChartAxisValueDoubleUnit.swift in Sources */,
 				B429D66C24BF7204003E1B4A /* GlucoseTrend.swift in Sources */,
 				432CF86720D76AB90066B889 /* SettingsTableViewCell.swift in Sources */,
+				DD508E082A17763700EEF8FD /* NewProfileEditor.swift in Sources */,
 				898B4E7B246DC6A70053C484 /* CorrectionRangeScheduleEditor.swift in Sources */,
 				E9E5E56A24D5CCE800B5DFFE /* OverrideViewCell.swift in Sources */,
 				892A5DB42231E191008961AB /* LevelMaskView.swift in Sources */,
@@ -3812,6 +3825,7 @@
 				E9C58A6E24DA65E400487A17 /* HistoricalOverrideDetailView.swift in Sources */,
 				895FE08222011F0C00FCF18A /* LabeledTextFieldTableViewCell.swift in Sources */,
 				B43DA44224D9CD8500CAFF4E /* Environment+Colors.swift in Sources */,
+				DD508E062A17712D00EEF8FD /* ProfileViewModel+FileManagement.swift in Sources */,
 				892A5DB22231E191008961AB /* LoadingTableViewCell.swift in Sources */,
 				B4D3D4AD25B8A94E0085BA0F /* DisplayGlucoseUnitObserver.swift in Sources */,
 				E96DCB5A24AF74AC007117BC /* SuspendThresholdEditor.swift in Sources */,
@@ -3880,6 +3894,7 @@
 				E93C86B624D08CAD0073089B /* InsulinSensitivityInformationView.swift in Sources */,
 				C18733AF29B9492300519CDF /* Collection.swift in Sources */,
 				892A5DA22231E137008961AB /* HUDProvider.swift in Sources */,
+				DDAF746929F4234000719F0A /* ProfileViewModel.swift in Sources */,
 				898E6E6C224194060019E459 /* UIColor.swift in Sources */,
 				43BA717D201EE7090058961E /* GlucoseRangeTableViewCell.swift in Sources */,
 				B455F3A425FF7FF0000ED456 /* CorrectionRangeOverridesEditorViewModel.swift in Sources */,
@@ -3902,6 +3917,7 @@
 				1D1065E9282DC54700026A70 /* VideoPlayView.swift in Sources */,
 				E99A132E2557548300D3F5B3 /* SegmentedGaugeBar.swift in Sources */,
 				B455F31825FBEC5F000ED456 /* SuspendThresholdEditorViewModel.swift in Sources */,
+				DDAF746729F422C600719F0A /* ProfileView.swift in Sources */,
 				892A5DB32231E191008961AB /* LevelHUDView.swift in Sources */,
 				B41A60B223D1DBC700636320 /* UIFont.swift in Sources */,
 				B41A60AF23D1DB5B00636320 /* TableViewTitleLabel.swift in Sources */,
diff --git a/LoopKit/LoopKitUI/ViewModels/ProfileViewModel+FileManagement.swift b/LoopKit/LoopKitUI/ViewModels/ProfileViewModel+FileManagement.swift
new file mode 100644
index 0000000..5e409ef
--- /dev/null
+++ b/LoopKit/LoopKitUI/ViewModels/ProfileViewModel+FileManagement.swift
@@ -0,0 +1,216 @@
+//
+//  ProfileViewModel+FileManagement.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-05-19.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import LoopKit
+import HealthKit
+
+public enum ProfileValidationError: Error, LocalizedError {
+    case fileLoadError
+    case unsupportedIncrement
+    case correctionRangeError
+    case insulinSensitivityError
+    case carbRatioError
+    case basalRateError
+    case maxBasalRateNotSet
+
+    public var errorDescription: String? {
+        switch self {
+        case .fileLoadError:
+            return "Unable to load the profile file."
+        case .unsupportedIncrement:
+            return "The profile contains unsupported increments."
+        case .correctionRangeError:
+            return "Correction Range values are out of bounds."
+        case .insulinSensitivityError:
+            return "Insulin Sensitivity values are out of bounds."
+        case .carbRatioError:
+            return "Carb Ratio values are out of bounds."
+        case .basalRateError:
+            return "Basal Rate values are out of bounds."
+        case .maxBasalRateNotSet:
+            return "Maximum Basal Rate is not set."
+        }
+    }
+}
+
+
+// MARK: File management
+extension ProfileViewModel {
+    private var profilesDirectory: URL {
+        let fileManager = FileManager.default
+        let documentsDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask)[0]
+        return documentsDirectory.appendingPathComponent("LoopProfile")
+    }
+
+    private func createProfileDirectoryIfNotExists() throws {
+        let fileManager = FileManager.default
+        var isDir : ObjCBool = false
+        if !fileManager.fileExists(atPath: profilesDirectory.path, isDirectory: &isDir) {
+            try fileManager.createDirectory(at: profilesDirectory, withIntermediateDirectories: true, attributes: nil)
+        } else if !isDir.boolValue {
+            throw NSError(domain: NSCocoaErrorDomain, code: NSFileWriteFileExistsError, userInfo: nil)
+        }
+    }
+
+    private func getAllProfileFiles() throws -> [URL] {
+        let fileManager = FileManager.default
+        let files = try fileManager.contentsOfDirectory(at: profilesDirectory, includingPropertiesForKeys: nil)
+        return files.filter { $0.pathExtension == "json" }
+    }
+
+    private func encodeProfile(_ profile: Profile) throws -> Data {
+        return try JSONEncoder().encode(profile)
+    }
+
+    private func decodeProfile(from data: Data) throws -> Profile {
+        return try JSONDecoder().decode(Profile.self, from: data)
+    }
+
+    public func saveProfile(withName name: String) {
+        do {
+            try createProfileDirectoryIfNotExists()
+
+            if let existingProfile = getProfile(withName: name) {
+                removeProfile(profile: existingProfile)
+            }
+
+            let profile = Profile(
+                name: name,
+                correctionRange: therapySettings.glucoseTargetRangeSchedule!,
+                carbRatioSchedule: therapySettings.carbRatioSchedule!,
+                basalRateSchedule: therapySettings.basalRateSchedule!,
+                insulinSensitivitySchedule: therapySettings.insulinSensitivitySchedule!
+            )
+
+            let jsonData = try encodeProfile(profile)
+
+            let dateFormatter = DateFormatter()
+            dateFormatter.dateFormat = "yyyy-MM-dd-HH-mm-ss"
+            let fileName = dateFormatter.string(from: Date()) + ".json"
+            let fileURL = profilesDirectory.appendingPathComponent(fileName)
+
+            try jsonData.write(to: fileURL)
+
+            self.loadProfiles()
+        } catch {
+            print("An error occurred while saving profile: \(error)")
+        }
+    }
+
+    public func loadProfiles() {
+        do {
+            let profileFiles = try getAllProfileFiles()
+
+            var newProfiles = [ProfileReference]()
+            for fileURL in profileFiles {
+                let data = try Data(contentsOf: fileURL)
+                let profile = try decodeProfile(from: data)
+                let profileRef = ProfileReference(name: profile.name, fileName: fileURL.lastPathComponent)
+                newProfiles.append(profileRef)
+            }
+
+            self.profiles = newProfiles
+        } catch {
+            print("An error occurred while loading profiles: \(error)")
+        }
+    }
+
+    public func loadProfile(profile: ProfileReference) {
+        do {
+            let fileURL = profilesDirectory.appendingPathComponent(profile.fileName)
+            let data = try Data(contentsOf: fileURL)
+            let loadedProfile = try decodeProfile(from: data)
+
+            saveCorrectionRange(range: loadedProfile.correctionRange)
+            saveCarbRatioSchedule(carbRatioSchedule: loadedProfile.carbRatioSchedule)
+            saveBasalRates(basalRates: loadedProfile.basalRateSchedule)
+            saveInsulinSensitivitySchedule(insulinSensitivitySchedule: loadedProfile.insulinSensitivitySchedule)
+
+            print("New profile loaded")
+        } catch {
+            print("An error occurred while loading profile: \(error)")
+        }
+    }
+
+    public func removeProfile(profile: ProfileReference) {
+        do {
+            let fileManager = FileManager.default
+            let fileURL = profilesDirectory.appendingPathComponent(profile.fileName)
+            try fileManager.removeItem(at: fileURL)
+
+            loadProfiles()
+        } catch {
+            print("An error occurred while removing profile: \(error)")
+        }
+    }
+
+    func doesProfileExist(withName name: String) -> Bool {
+        return profiles.contains(where: { $0.name == name })
+    }
+
+    func getProfile(withName name: String) -> ProfileReference? {
+        return profiles.first(where: { $0.name == name })
+    }
+
+    private func getProfile(from profileReference: ProfileReference) throws -> Profile {
+        let fileURL = profilesDirectory.appendingPathComponent(profileReference.fileName)
+        let data = try Data(contentsOf: fileURL)
+        let getProfile = try decodeProfile(from: data)
+        return getProfile
+    }
+
+    public func validateProfile(_ profileReference: ProfileReference) -> Result<Void, ProfileValidationError> {
+        guard let profile = try? getProfile(from: profileReference),
+              let supportedIncrements = delegate?.pumpSupportedIncrements() else {
+            return .failure(.fileLoadError)
+        }
+
+        // Checking Correction Range Schedule
+        for item in profile.correctionRange.items {
+            let minValue = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: item.value.minValue)
+            let maxValue = HKQuantity(unit: .milligramsPerDeciliter, doubleValue: item.value.maxValue)
+
+            if !(Guardrail.correctionRange.absoluteBounds.contains(minValue) && Guardrail.correctionRange.absoluteBounds.contains(maxValue)) {
+                return .failure(.correctionRangeError)
+            }
+        }
+
+        // Checking Insulin Sensitivity Schedule
+        for item in profile.insulinSensitivitySchedule.items {
+            let value = HKQuantity(unit: HKUnit.milligramsPerDeciliter.unitDivided(by: .internationalUnit()), doubleValue: item.value)
+
+            if !Guardrail.insulinSensitivity.absoluteBounds.contains(value) {
+                return .failure(.insulinSensitivityError)
+            }
+        }
+
+        // Checking Carb Ratio Schedule
+        for item in profile.carbRatioSchedule.items {
+            let value = HKQuantity(unit: .gramsPerUnit, doubleValue: item.value)
+
+            if !Guardrail.carbRatio.absoluteBounds.contains(value) {
+                return .failure(.carbRatioError)
+            }
+        }
+
+        // Checking Basal Rate Schedule
+        if let maximumBasalRate = therapySettings.maximumBasalRatePerHour {
+            for item in profile.basalRateSchedule.items {
+                let value = item.value
+
+                if value > maximumBasalRate || !supportedIncrements.basalRates.contains(value) {
+                    return .failure(.basalRateError)
+                }
+            }
+        } else {
+            return .failure(.maxBasalRateNotSet)
+        }
+
+        return .success(())
+    }
+}
diff --git a/LoopKit/LoopKitUI/ViewModels/ProfileViewModel.swift b/LoopKit/LoopKitUI/ViewModels/ProfileViewModel.swift
new file mode 100644
index 0000000..76318a3
--- /dev/null
+++ b/LoopKit/LoopKitUI/ViewModels/ProfileViewModel.swift
@@ -0,0 +1,70 @@
+//
+//  ProfileViewModel.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-04-22.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import Combine
+import LoopKit
+import HealthKit
+import SwiftUI
+
+public class ProfileViewModel: ObservableObject {
+
+    @Published public var therapySettings: TherapySettings
+    @Published public var profiles = [ProfileReference]()
+
+    internal weak var delegate: TherapySettingsViewModelDelegate?
+
+    public init(therapySettings: TherapySettings,
+                pumpSupportedIncrements: (() -> PumpSupportedIncrements?)? = nil,
+                sensitivityOverridesEnabled: Bool = false,
+                adultChildInsulinModelSelectionEnabled: Bool = false,
+                prescription: Prescription? = nil,
+                delegate: TherapySettingsViewModelDelegate? = nil) {
+        self.therapySettings = therapySettings
+        self.delegate = delegate
+        self.loadProfiles()
+    }
+}
+
+struct Profile: Codable {
+    let name: String
+    let correctionRange: GlucoseRangeSchedule
+    let carbRatioSchedule: CarbRatioSchedule
+    let basalRateSchedule: BasalRateSchedule
+    let insulinSensitivitySchedule: InsulinSensitivitySchedule
+}
+
+public struct ProfileReference: Codable, Equatable {
+    var name: String
+    var fileName: String
+}
+
+
+// MARK: Saving
+extension ProfileViewModel {
+
+    public func saveCorrectionRange(range: GlucoseRangeSchedule) {
+        therapySettings.glucoseTargetRangeSchedule = range
+        delegate?.saveCompletion(therapySettings: therapySettings)
+    }
+
+    public func saveBasalRates(basalRates: BasalRateSchedule) {
+        therapySettings.basalRateSchedule = basalRates
+        delegate?.saveCompletion(therapySettings: therapySettings)
+    }
+
+    public func saveCarbRatioSchedule(carbRatioSchedule: CarbRatioSchedule) {
+        therapySettings.carbRatioSchedule = carbRatioSchedule
+        delegate?.saveCompletion(therapySettings: therapySettings)
+    }
+
+    public func saveInsulinSensitivitySchedule(insulinSensitivitySchedule: InsulinSensitivitySchedule) {
+        therapySettings.insulinSensitivitySchedule = insulinSensitivitySchedule
+        delegate?.saveCompletion(therapySettings: therapySettings)
+    }
+}
diff --git a/LoopKit/LoopKitUI/Views/Settings Editors/NewProfileEditor.swift b/LoopKit/LoopKitUI/Views/Settings Editors/NewProfileEditor.swift
new file mode 100644
index 0000000..4fcbea1
--- /dev/null
+++ b/LoopKit/LoopKitUI/Views/Settings Editors/NewProfileEditor.swift	
@@ -0,0 +1,79 @@
+//
+//  NewProfileEditor.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-05-19.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import SwiftUI
+
+struct NewProfileEditor: View {
+    @Binding var isPresented: Bool
+    @State var newProfileName: String
+    var viewModel: ProfileViewModel
+    @State private var showAlert = false
+
+    var body: some View {
+        VStack(spacing: 0) {
+            ModalHeaderButtonBar(
+                leading: { cancelButton },
+                center: {
+                    Text("New Profile")
+                        .font(.headline)
+                },
+                trailing: { addButton }
+            )
+
+            TextField("Profile Name", text: $newProfileName)
+                .textFieldStyle(RoundedBorderTextFieldStyle())
+                .padding()
+                .background(
+                    RoundedCorners(radius: 10, corners: [.bottomLeft, .bottomRight])
+                        .fill(Color(.secondarySystemGroupedBackground))
+                )
+        }
+        .padding(.horizontal)
+        .alert(isPresented: $showAlert) {
+            Alert(
+                title: Text("Overwrite Existing Profile"),
+                message: Text("A profile with this name already exists. Would you like to overwrite it?"),
+                primaryButton: .destructive(Text("Overwrite")) {
+                    self.viewModel.saveProfile(withName: self.newProfileName)
+                    self.isPresented = false
+                },
+                secondaryButton: .cancel()
+            )
+        }
+    }
+
+    var addButton: some View {
+        Button(
+            action: {
+                withAnimation {
+                    if viewModel.doesProfileExist(withName: self.newProfileName) {
+                        self.showAlert = true
+                    } else {
+                        self.viewModel.saveProfile(withName: self.newProfileName)
+                        self.isPresented = false
+                    }
+                }
+            }, label: {
+                Text("Add")
+            }
+        )
+    }
+
+    var cancelButton: some View {
+        Button(
+            action: {
+                withAnimation {
+                    self.isPresented = false
+                }
+            }, label: {
+                Text("Cancel")
+            }
+        )
+    }
+}
diff --git a/LoopKit/LoopKitUI/Views/Settings Editors/ProfileView.swift b/LoopKit/LoopKitUI/Views/Settings Editors/ProfileView.swift
new file mode 100644
index 0000000..945ce79
--- /dev/null
+++ b/LoopKit/LoopKitUI/Views/Settings Editors/ProfileView.swift	
@@ -0,0 +1,174 @@
+//
+//  ProfileView.swift
+//  LoopKitUI
+//
+//  Created by Jonas Björkert on 2023-04-22.
+//  Copyright © 2023 LoopKit Authors. All rights reserved.
+//
+
+import Foundation
+import AVFoundation
+import HealthKit
+import LoopKit
+import SwiftUI
+
+enum ActiveAlert {
+    case load, delete, error
+}
+
+public struct ProfileView: View {
+    @ObservedObject public var viewModel: ProfileViewModel
+    @Environment(\.dismissAction) var dismissAction
+    @State private var newProfileName: String = ""
+    @State private var isAddingNewProfile = false
+    @State private var showingAlert = false
+    @State private var activeAlert: ActiveAlert = .load
+    @State private var selectedProfile: ProfileReference?
+    @State private var errorText: String?
+
+    public init(viewModel: ProfileViewModel) {
+        self.viewModel = viewModel
+    }
+
+    private var dismissButton: some View {
+        Button(action: dismissAction) {
+            Text(LocalizedString("Done", comment: "Text for dismiss button"))
+                .bold()
+        }
+    }
+
+    public var body: some View {
+        ZStack {
+            NavigationView {
+                ConfigurationPageScrollView(
+                    content: {
+                        VStack(alignment: .leading) {
+                            Text("Press '+' to save the current glucose target range, carb ratio, basal rates, and insulin sensitivity settings as a new profile. Tap on a profile to switch to these settings. Swipe left to remove a profile. Note: other settings are not affected by these profiles.")
+                                .font(.subheadline)
+                                .foregroundColor(.secondary)
+                                .padding([.leading, .trailing])
+                                .fixedSize(horizontal: false, vertical: true) // this allows the text to wrap
+                                .textCase(nil) // keeps the original text casing
+
+                            List {
+                                ForEach(viewModel.profiles, id: \.fileName) { profile in
+                                    HStack {
+                                        Button(action: {
+                                            selectedProfile = profile
+                                            activeAlert = .load
+                                            showingAlert = true
+                                        }) {
+                                            Text(profile.name)
+                                        }
+                                    }
+                                }
+                                .onDelete { indexSet in
+                                    for index in indexSet {
+                                        selectedProfile = viewModel.profiles[index]
+                                        activeAlert = .delete
+                                        showingAlert = true
+                                    }
+                                }
+                            }.padding(.top, -15)
+                        }
+                    },
+                    actionArea: { EmptyView() } // no action area in this case
+                )
+                .navigationBarItems(
+                    leading: Button(action: { withAnimation { isAddingNewProfile = true } }) {
+                        Image(systemName: "plus")
+                    },
+                    trailing: dismissButton
+                )
+                .navigationTitle(Text(LocalizedString("Profiles", comment: "Title on ProfileView")))
+            }
+            .navigationBarHidden(false)
+            .background(Color(.systemGroupedBackground))
+            .alert(isPresented: $showingAlert) {
+                switch activeAlert {
+                case .load:
+                    return Alert(
+                        title: Text("Load Profile"),
+                        message: Text("Do you want to load the profile \(selectedProfile?.name ?? "undefined")?"),
+                        primaryButton: .default(Text("Yes"), action: {
+                            if let profile = selectedProfile {
+
+                                let validationResult = viewModel.validateProfile(profile)
+                                switch validationResult {
+                                case .success:
+                                    viewModel.loadProfile(profile: profile)
+                                    dismissAction()
+                                case .failure(let error):
+                                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
+                                        self.errorText = error.localizedDescription
+                                        self.activeAlert = .error
+                                        self.showingAlert = true
+                                    }
+                                }
+                            }
+                        }),
+                        secondaryButton: .cancel()
+                    )
+                case .delete:
+                    return Alert(
+                        title: Text("Delete Profile"),
+                        message: Text("Are you sure you want to delete the profile \(selectedProfile?.name ?? "undefined")? This action cannot be undone."),
+                        primaryButton: .destructive(Text("Delete"), action: {
+                            if let profile = selectedProfile {
+                                viewModel.removeProfile(profile: profile)
+                            }
+                            selectedProfile = nil
+                        }),
+                        secondaryButton: .cancel(Text("Cancel"), action: {
+                            selectedProfile = nil
+                        })
+                    )
+                case .error:
+                    return Alert(
+                        title: Text("Error loading profile"),
+                        message: Text(errorText ?? "Unknown error"),
+                        dismissButton: .default(Text("OK"))
+                    )
+                }
+            }
+
+            if isAddingNewProfile {
+                DarkenedOverlay()
+
+                NewProfileEditor(
+                    isPresented: $isAddingNewProfile,
+                    newProfileName: newProfileName,
+                    viewModel: viewModel
+                )
+                .transition(AnyTransition.move(edge: .bottom).combined(with: .opacity).animation(.default))
+            }
+        }
+    }
+}
+
+struct ProfileView_Previews: PreviewProvider {
+    static let preview_glucoseScheduleItems = [
+        RepeatingScheduleValue(startTime: 0, value: DoubleRange(80...90)),
+        RepeatingScheduleValue(startTime: 1800, value: DoubleRange(90...100)),
+        RepeatingScheduleValue(startTime: 3600, value: DoubleRange(100...110))
+    ]
+
+    static let preview_therapySettings = TherapySettings(
+        glucoseTargetRangeSchedule: GlucoseRangeSchedule(unit: .milligramsPerDeciliter, dailyItems: preview_glucoseScheduleItems),
+        correctionRangeOverrides: CorrectionRangeOverrides(preMeal: DoubleRange(88...99),
+                                                           workout: DoubleRange(99...111),
+                                                           unit: .milligramsPerDeciliter),
+        maximumBolus: 4,
+        suspendThreshold: GlucoseThreshold.init(unit: .milligramsPerDeciliter, value: 60),
+        insulinSensitivitySchedule: InsulinSensitivitySchedule(unit: HKUnit.milligramsPerDeciliter.unitDivided(by: HKUnit.internationalUnit()), dailyItems: []),
+        carbRatioSchedule: nil,
+        basalRateSchedule: BasalRateSchedule(dailyItems: [RepeatingScheduleValue(startTime: 0, value: 0.2), RepeatingScheduleValue(startTime: 1800, value: 0.75)]))
+
+    static let preview_supportedBasalRates = [0.2, 0.5, 0.75, 1.0]
+    static let preview_supportedBolusVolumes = [1.0, 2.0, 3.0]
+    static let preview_supportedMaximumBolusVolumes = [5.0, 10.0, 15.0]
+
+    static var previews: some View {
+        ProfileView(viewModel: ProfileViewModel(therapySettings: preview_therapySettings))
+    }
+}
