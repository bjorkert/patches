From 4212aa0d69c8b7d65b1143ab1e9a0faa8306ab9b Mon Sep 17 00:00:00 2001
From: bjorkert <jonas@bjorkert.se>
Date: Tue, 28 Feb 2023 19:34:36 +0100
Subject: [PATCH] =?UTF-8?q?=E2=80=9Clf=5Ftemporary=5Ftarget=E2=80=9D?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 LoopFollow/Controllers/Graphs.swift           | 57 ++++++++++++++-
 LoopFollow/Controllers/NightScout.swift       | 73 ++++++++++++++++++-
 .../ViewControllers/MainViewController.swift  |  1 +
 LoopFollow/helpers/Chart.swift                |  7 ++
 LoopFollow/helpers/DataStructs.swift          |  8 ++
 5 files changed, 143 insertions(+), 3 deletions(-)

diff --git a/LoopFollow/Controllers/Graphs.swift b/LoopFollow/Controllers/Graphs.swift
index 485dd71..087d0ee 100644
--- a/LoopFollow/Controllers/Graphs.swift
+++ b/LoopFollow/Controllers/Graphs.swift
@@ -267,6 +267,20 @@ extension MainViewController {
         lineNote.valueFormatter = ChartYDataValueFormatter()
         lineNote.drawValuesEnabled = false
         
+        // Notes
+        var chartEntryTemporaryTarget = [ChartDataEntry]()
+        let lineTemporaryTarget = LineChartDataSet(entries:chartEntryTemporaryTarget, label: "")
+        lineTemporaryTarget.setDrawHighlightIndicators(false)
+        lineTemporaryTarget.lineWidth = 0
+        lineTemporaryTarget.drawFilledEnabled = true
+        lineTemporaryTarget.fillFormatter = TemporaryTargetFillFormatter()
+        lineTemporaryTarget.fillColor = NSUIColor.systemOrange
+        lineTemporaryTarget.fillAlpha = 0.6
+        lineTemporaryTarget.drawCirclesEnabled = false
+        lineTemporaryTarget.axisDependency = YAxis.AxisDependency.right
+        lineTemporaryTarget.highlightEnabled = true
+        lineTemporaryTarget.drawValuesEnabled = false
+        
         // Setup the chart data of all lines
         let data = LineChartData()
         
@@ -282,7 +296,8 @@ extension MainViewController {
         data.append(lineResume) // Dataset 9
         data.append(lineSensor) // Dataset 10
         data.append(lineNote) // Dataset 11
-        
+        data.append(lineTemporaryTarget) // Dataset 12
+
         data.setValueFont(UIFont.systemFont(ofSize: 12))
         
         // Add marker popups for bolus and carbs
@@ -1240,6 +1255,46 @@ extension MainViewController {
             BGChartFull.notifyDataSetChanged()
         }
     }
+ 
+    func updateTemporaryTargetGraph() {
+        var dataIndex = 12
+        var yTop: Double = Double(topBG - 25)
+        var yBottom: Double = Double(topBG - 45)
+        var chart = BGChart.lineData!.dataSets[dataIndex] as! LineChartDataSet
+//        var smallChart = BGChartFull.lineData!.dataSets[dataIndex] as! LineChartDataSet
+        chart.clear()
+//        smallChart.clear()
+        let thisData = temporaryTargetGraphData
+        
+        var colors = [NSUIColor]()
+        for i in 0..<thisData.count{
+            let thisItem = thisData[i]
+            var labelText = thisItem.reason + "\r\n"
+            if thisItem.enteredBy.count > 0 {
+                labelText += "\r\nEntered By: " + thisItem.enteredBy
+            }
+
+            // Start Dot
+            // Shift dots 30 seconds to create an empty 0 space between consecutive temps
+            let preStartDot = ChartDataEntry(x: Double(thisItem.date), y: yBottom, data: labelText)
+            BGChart.data?.dataSets[dataIndex].addEntry(preStartDot)
+
+            let startDot = ChartDataEntry(x: Double(thisItem.date + 1), y: yTop, data: labelText)
+            BGChart.data?.dataSets[dataIndex].addEntry(startDot)
+
+            // End Dot
+            let endDot = ChartDataEntry(x: Double(thisItem.endDate - 2), y: yTop, data: labelText)
+            BGChart.data?.dataSets[dataIndex].addEntry(endDot)
+
+            // Post end dot
+            let postEndDot = ChartDataEntry(x: Double(thisItem.endDate - 1), y: yBottom, data: labelText)
+
+        }
+        
+        BGChart.data?.dataSets[dataIndex].notifyDataSetChanged()
+        BGChart.data?.notifyDataChanged()
+        BGChart.notifyDataSetChanged()
+    }
     
     func formatPillText(line1: String, time: TimeInterval) -> String {
         let dateFormatter = DateFormatter()
diff --git a/LoopFollow/Controllers/NightScout.swift b/LoopFollow/Controllers/NightScout.swift
index e846bfa..b2288ea 100644
--- a/LoopFollow/Controllers/NightScout.swift
+++ b/LoopFollow/Controllers/NightScout.swift
@@ -995,7 +995,8 @@ extension MainViewController {
         var resumePump: [[String:AnyObject]] = []
         var pumpSiteChange: [[String:AnyObject]] = []
         var cgmSensorStart: [[String:AnyObject]] = []
-        
+        var temporaryTarget: [[String:AnyObject]] = []
+
         for i in 0..<entries.count {
             let entry = entries[i] as [String : AnyObject]?
             switch entry?["eventType"] as! String {
@@ -1023,6 +1024,8 @@ extension MainViewController {
                     pumpSiteChange.append(entry!)
                 case "Sensor Start":
                     cgmSensorStart.append(entry!)
+                case "Temporary Target":
+                    temporaryTarget.append(entry!)
                 default:
                     print("No Match: \(String(describing: entry))")
             }
@@ -1085,6 +1088,13 @@ extension MainViewController {
                        clearOldSensor()
                    }
                }
+               if temporaryTarget.count > 0 {
+                   processTemporaryTarget(entries: temporaryTarget)
+               } else {
+                   if temporaryTargetGraphData.count > 0 {
+                       clearOldTemporaryTarget()
+                   }
+               }
                if note.count > 0 {
                    processNotes(entries: note)
                } else {
@@ -1147,7 +1157,13 @@ extension MainViewController {
             noteGraphData.removeAll()
             updateNotes()
         }
-    
+
+        func clearOldTemporaryTarget()
+        {
+            noteGraphData.removeAll()
+            updateTemporaryTargetGraph()
+        }
+
     // NS Temp Basal Response Processor
     func processNSBasals(entries: [[String:AnyObject]]) {
         self.clearLastInfoData(index: 2)
@@ -1749,4 +1765,57 @@ extension MainViewController {
         }
         
     }
+    
+    // Temporary Target Processor
+    func processTemporaryTarget(entries: [[String:AnyObject]]) {
+        if UserDefaultsRepository.debugLog.value { self.writeDebugLog(value: "Process: Temporary Target") }
+        temporaryTargetGraphData.removeAll()
+        for i in 0..<entries.count {
+            let currentEntry = entries[entries.count - 1 - i] as [String : AnyObject]?
+            var date: String
+            if currentEntry?["timestamp"] != nil {
+                date = currentEntry?["timestamp"] as! String
+            } else if currentEntry?["created_at"] != nil {
+                date = currentEntry?["created_at"] as! String
+            } else {
+                return
+            }
+            // Fix for FreeAPS milliseconds in timestamp
+            var strippedZone = String(date.dropLast())
+            strippedZone = strippedZone.components(separatedBy: ".")[0]
+            
+            let dateFormatter = DateFormatter()
+            dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss"
+            dateFormatter.locale = Locale(identifier: "en_US")
+            dateFormatter.timeZone = TimeZone(abbreviation: "UTC")
+            let dateString = dateFormatter.date(from: strippedZone)
+            var dateTimeStamp = dateString!.timeIntervalSince1970
+            let graphHours = 24 * UserDefaultsRepository.downloadDays.value
+            if dateTimeStamp < dateTimeUtils.getTimeIntervalNHoursAgo(N: graphHours) {
+                dateTimeStamp = dateTimeUtils.getTimeIntervalNHoursAgo(N: graphHours)
+            }
+            
+            var duration: Double = 5.0
+            if let durationType = currentEntry?["durationType"] as? String {
+                duration = dateTimeUtils.getNowTimeIntervalUTC() - dateTimeStamp + (60 * 60)
+            } else {
+                duration = (currentEntry?["duration"] as? Double)!
+                duration = duration * 60
+            }
+            
+            // Skip temporary targets that aren't 5 minutes long. This prevents overlapping that causes bars to not display.
+            if duration < 300 { continue }
+            
+            guard let enteredBy = currentEntry?["enteredBy"] as? String else { continue }
+            guard let reason = currentEntry?["reason"] as? String else { continue }
+            
+            let endDate = dateTimeStamp + (duration)
+            
+            let dot = DataStructs.temporaryTargetStruct(date: dateTimeStamp, endDate: endDate, duration: duration, enteredBy: enteredBy, reason: reason)
+            temporaryTargetGraphData.append(dot)
+        }
+        if UserDefaultsRepository.graphOtherTreatments.value {
+            updateTemporaryTargetGraph()
+        }
+    }
 }
diff --git a/LoopFollow/ViewControllers/MainViewController.swift b/LoopFollow/ViewControllers/MainViewController.swift
index 2421e5a..cd9c626 100644
--- a/LoopFollow/ViewControllers/MainViewController.swift
+++ b/LoopFollow/ViewControllers/MainViewController.swift
@@ -107,6 +107,7 @@ class MainViewController: UIViewController, UITableViewDataSource, ChartViewDele
     var bolusData: [bolusGraphStruct] = []
     var carbData: [carbGraphStruct] = []
     var overrideGraphData: [DataStructs.overrideStruct] = []
+    var temporaryTargetGraphData: [DataStructs.temporaryTargetStruct] = []
     var predictionData: [ShareGlucoseData] = []
     var bgCheckData: [ShareGlucoseData] = []
     var suspendGraphData: [DataStructs.timestampOnlyStruct] = []
diff --git a/LoopFollow/helpers/Chart.swift b/LoopFollow/helpers/Chart.swift
index 29fb604..e58851f 100644
--- a/LoopFollow/helpers/Chart.swift
+++ b/LoopFollow/helpers/Chart.swift
@@ -16,6 +16,13 @@ final class OverrideFillFormatter: FillFormatter {
     }
 }
 
+final class TemporaryTargetFillFormatter: FillFormatter {
+    func getFillLinePosition(dataSet: Charts.LineChartDataSetProtocol, dataProvider: Charts.LineChartDataProvider) -> CGFloat {
+        return CGFloat(dataSet.entryForIndex(0)!.y)
+        //return 375
+    }
+}
+
 final class basalFillFormatter: FillFormatter {
     func getFillLinePosition(dataSet: Charts.LineChartDataSetProtocol, dataProvider: Charts.LineChartDataProvider) -> CGFloat {
         return 0
diff --git a/LoopFollow/helpers/DataStructs.swift b/LoopFollow/helpers/DataStructs.swift
index 20809b3..1b8f2be 100644
--- a/LoopFollow/helpers/DataStructs.swift
+++ b/LoopFollow/helpers/DataStructs.swift
@@ -48,4 +48,12 @@ class DataStructs {
         var sgv: Float
     }
     
+    //Temporary Target  Struct
+    struct temporaryTargetStruct: Codable {
+        var date: TimeInterval
+        var endDate: TimeInterval
+        var duration: Double
+        var enteredBy: String
+        var reason: String
+    }
 }
-- 
2.38.1

